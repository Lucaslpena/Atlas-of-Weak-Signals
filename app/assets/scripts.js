/*!
 * aows
 * 
 * 
 * @author Lucas Lorenzo Pena <lucaslpena@gmail.com>
 * @version 0.1.0
 * Copyright 2019. CC-BY-NC-SA-4.0 licensed.
 */
function Particle(x, y, atlasobj) {
  this.pos = createVector(x, y);
  this.vel = createVector(random(-2, 2), random(-2, 2));
  this.acc = createVector(0, -8);
  this.size = 20;
  this.maxSpeed = .3;
  this.maxForce = 1;
  this.theta = 0.0;
  this.atlas = atlasobj;
  this.gifShow = false;
  this.paused = true; // set to true

  this.frozen = true;
  this.itvl = floor(random(200, 1000));

  this.spawn = function () {//     if( (this.img.frame([]) > 100) || (this.img.frame([]) < 5) ){
    //       if (this.gifShow == true) {
    //         //print('finished showing');
    //         this.paused = true;
    //       }
    //       this.gifShow = false; // hidden
    //     } else {
    //       this.gifShow = true; // showing
    //     }
    //     if (this.frozen) {
    //       if( (frameCount % this.itvl) == 0){
    //         //print('thaw');
    //         this.img.play();
    //         this.frozen = false;
    //       }
    //     }
  };

  this.update = function () {
    //deadFIX
    // this.spawn();
    this.vel.add(this.acc);
    this.vel.limit(this.maxSpeed);
    this.pos.add(this.vel);
    this.acc.set(0, 0);
    this.border();
  };

  this.display = function () {
    var theta = this.vel.heading() + radians(90);
    this.theta += this.vel.x * this.vel.mag() / 20;
    var r = 4;
    push();
    translate(this.pos.x, this.pos.y);
    rotate(this.theta); // rect(0,0,10,10);
    // text(this.atlas.kw, 0,0, 100,20);

    text(this.atlas.kw, 0, 0, 200, 200); // if (this.paused) { //paused
    //print('paused');
    //print('frozen');
    // this.paused = false;
    // this.frozen = true;
    // this.img.pause();
    // }
    // if (this.img.loaded()){
    //   image(this.img, this.size/-2, this.size/-2, this.size, this.size);
    // }

    pop();
  };

  this.border = function () {
    if (this.pos.x < -this.size) this.pos.x = width + this.size;
    if (this.pos.y < -this.size) this.pos.y = height + this.size;
    if (this.pos.x > width + this.size) this.pos.x = -this.size;
    if (this.pos.y > height + this.size) this.pos.y = -this.size;
  };

  this.separate = function (vehicles) {
    var desiredseparation = this.size * 1.1;
    var sum = createVector();
    var count = 0;

    for (var i = 0; i < vehicles.length; i++) {
      var d = p5.Vector.dist(this.pos, vehicles[i].pos);

      if (d > 0 && d < desiredseparation) {
        var diff = p5.Vector.sub(this.pos, vehicles[i].pos);
        diff.normalize();
        diff.div(d);
        sum.add(diff);
        count++;
      }
    }

    if (count > 0) {
      sum.div(count);
      sum.normalize();
      sum.mult(this.maxSpeed * 10);
      var steer = p5.Vector.sub(sum, this.velocity);
      steer.limit(this.maxforce);
      this.applyForce(steer);
    }
  };

  this.applyForce = function (force) {
    this.acc.add(force);
  };

  this.applyGravity = function () {
    //ideally this would take obj with its own x,y...
    var wordcord = createVector(width / 2, height / 2);
    var grav = p5.Vector.sub(wordcord, this.pos);
    this.applyForce(grav);
  };
}
/*!
 * aows
 * 
 * 
 * @author Lucas Lorenzo Pena <lucaslpena@gmail.com>
 * @version 0.1.0
 * Copyright 2019. CC-BY-NC-SA-4.0 licensed.
 */
var particles = [];
var limit = 10;
var imgs = [];
var weaksignals = [];
var keywords = [];

function preload() {}

var cnv;

function centerCanvas() {
  cnv = createCanvas(windowWidth, windowHeight);
  var x = (windowWidth - width) / 2;
  var y = (windowHeight - height) / 2;
  cnv.position(x, y);
}

function windowResized() {
  centerCanvas();
}

function setup() {
  centerCanvas();
  setupWeakSignals(); // textFont("Overpass Mono");
  // for (var i = 0; i < limit; i++) {
  //     var imgLoc = (floor(random(1, imgs.length)) - 1);
  //     var img = imgs[i];
  //     particles.push(new Particle(random(50, width - 50), random(50, height - 50), img));
  // }

  weaksignals.forEach(function (ws, i) {
    keywords[0].forEach(function (kw, i) {
      particles.push(new Particle(random(50, width - 50), random(50, height - 50), {
        ws: ws,
        kw: kw
      }));
    });
  });
}

function draw() {
  background('#000');

  for (var i = 0; i < particles.length; i++) {
    particles[i].applyGravity();
    particles[i].separate(particles);
    particles[i].update();
    particles[i].display();
  }

  fill(100);
  textSize(32); // text("   The Future Is Now", mouseX, mouseY, 600, 200);

  weaksignals.forEach(function (ws) {
    ellipse(width / 2, height / 2, 200, 200);
    fill(255);
    text(ws, width / 2, height / 2, 200, 200); // todo -- create with box and align to center of that box
  });
}

console.log('hello' + 'world'.repeat(3));

function setupWeakSignals() {
  // load from file...
  // into array
  console.log('setup');
  weaksignals.push("Ai Bias");
  keywords.push(["exclusion", "data set", "ai ethics", "manipulation"]);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
