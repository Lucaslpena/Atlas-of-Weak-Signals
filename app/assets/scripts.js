/*!
 * aows
 * 
 * 
 * @author Lucas Lorenzo Pena <lucaslpena@gmail.com>
 * @version 0.1.0
 * Copyright 2019. CC-BY-NC-SA-4.0 licensed.
 */
function Attractor(weaksignal, xCord, yCord) {
  this.ws = weaksignal;
  var length = width - 2 * padding;
  var interval = length / grid;
  var centerX = padding + interval * (xCord + 1);
  centerX = centerX - interval / 2;
  length = height - 2 * padding;
  interval = length / grid;
  var centerY = padding + interval * (yCord + 1);
  centerY = centerY - interval / 2;
  this.pos = createVector(centerX, centerY);
  this.vel = createVector(0, 0);
  this.acc = createVector(0, 0);
  this.mass = 6;
  this.G = 20; //was 80

  this.scaler = 5;

  this.calculateAttraction = function (p) {
    //calculate direction of force
    var force = p5.Vector.sub(this.pos, p.pos); //distance between objects

    var distance = force.mag(); //limit vector to eliminate extreme values at very close or very far
    // distance = constrain(distance,20,25);

    distance = constrain(distance, 50, 55); //Not really important but is what it is to get direction

    force.normalize(); //calculate gravitational from magniitude

    var strength = this.G * this.mass * p.mass / (distance * distance); //get force vector --> magnitude * direction

    force.mult(strength); //var force;

    return force;
  };

  this.applyForce = function (force) {
    // A = F /M
    var f = force.copy();
    f.div(this.mass);
    this.acc.add(f);
  };

  this.update = function () {
    this.edges();
    this.vel.add(this.acc);
    this.pos.add(this.vel);
    this.acc.set(0, 0);
  };

  this.display = function () {
    push(); // fill(30,25,20);

    stroke(30, 25, 30); // ellipse(this.pos.x, this.pos.y, this.mass * this.scaler, this.mass * this.scaler);
    // fill(30,25,20);

    textAlign(CENTER, CENTER);
    text(this.ws, this.pos.x, this.pos.y);
    pop();
  };

  this.edges = function () {
    if (this.pos.y > height) {
      this.vel.y *= -1;
      this.pos = createVector(width / 2, height / 2);
      this.vel = createVector(0, 0);
    }

    if (this.pos.x > width) {
      this.vel.x *= -1;
      this.pos = createVector(width / 2, height / 2);
      this.vel = createVector(0, 0);
    }

    if (this.pos.x < 0) {
      this.vel.x *= -1;
      this.pos = createVector(width / 2, height / 2);
      this.vel = createVector(0, 0);
    }

    if (this.pos.y < 0) {
      this.vel.x *= -1;
      this.pos = createVector(width / 2, height / 2);
      this.vel = createVector(0, 0);
    }
  };
}
/*!
 * aows
 * 
 * 
 * @author Lucas Lorenzo Pena <lucaslpena@gmail.com>
 * @version 0.1.0
 * Copyright 2019. CC-BY-NC-SA-4.0 licensed.
 */
function Particle(x, y, a) {
  this.atlas = a;
  this.pos = createVector(x, y);
  this.vel = createVector(random(-3, 3), random(-3, 3));
  this.acc = createVector(0, -8); // this.vel = createVector(0,0);
  // this.acc = createVector(0,0);

  this.mass = 10;
  this.G = 5;
  this.previousVel = createVector(0, 0);
  this.maxSpeed = 3;
  this.theta = 0.0;
  this.size = 20; // this.maxForce = 1;

  this.history = [];

  this.update = function () {
    this.edges();
    this.vel.add(this.acc);
    this.vel.limit(this.maxSpeed);
    this.pos.add(this.vel);
    this.acc.set(0, 0);

    if (frameCount % 10 == 1) {
      var v = createVector(this.pos.x, this.pos.y);
      this.history.push(v);

      if (this.history.length > 8) {
        this.history.splice(0, 1);
      } // console.log(this.pos);
      // console.log("current ^ last v");
      // console.log(this.history);

    }
  };

  this.display = function () {
    this.trailing();
    var theta = this.vel.heading() + radians(90);
    this.theta += this.vel.x * this.vel.mag() / 20;
    var r = 4;
    push();
    translate(this.pos.x, this.pos.y); // rotate(this.theta);

    textAlign(CENTER, CENTER);
    textSize(8);
    text(this.atlas.kw, 0, 0);
    pop();
  };

  this.trailing = function () {
    for (var i = 0; i < this.history.length; i++) {
      var pos = this.history[i];
      push();
      translate(pos.x, pos.y);
      stroke(100);
      fill(225);
      point(0, 0);
      pop();
    }
  };

  this.edges = function () {
    if (this.pos.x < -this.size) this.pos.x = width + this.size;
    if (this.pos.y < -this.size) this.pos.y = height + this.size;
    if (this.pos.x > width + this.size) this.pos.x = -this.size;
    if (this.pos.y > height + this.size) this.pos.y = -this.size;
  };

  this.separate = function (vehicles) {
    var desiredseparation = this.size * 1.1;
    var sum = createVector();
    var count = 0;

    for (var i = 0; i < vehicles.length; i++) {
      var d = p5.Vector.dist(this.pos, vehicles[i].pos);

      if (d > 0 && d < desiredseparation) {
        var diff = p5.Vector.sub(this.pos, vehicles[i].pos);
        diff.normalize();
        diff.div(d);
        sum.add(diff);
        count++;
      }
    }

    if (count > 0) {
      sum.div(count);
      sum.normalize();
      sum.mult(this.maxSpeed * 2);
      var steer = p5.Vector.sub(sum, this.velocity);
      steer.limit(this.maxforce);
      this.applyForce(steer);
    }
  };

  this.applyForce = function (force) {
    var f = force.copy();
    f.div(this.mass);
    this.acc.add(f);
  }; //calculate attraction


  this.calculateAttraction = function (obj) {
    //calculate direction of force
    var force = p5.Vector.sub(this.pos, obj.pos); //distance between objects

    var distance = force.mag(); //limit vector to eliminate extreme values at very close or very far
    //distance = constrain(distance,20,25);
    //Not really important but is what it is to get direction

    force.normalize(); //calculate gravitational from magniitude

    var strength = this.G * this.mass * obj.mass / (distance * distance); //get force vector --> magnitude * direction

    force.mult(strength); //var force;

    return force;
  };

  this.applyGravity = function () {
    for (var i = 0; i < attractors.length; i++) {
      var a = attractors[i];

      if (a.ws === this.atlas.ws) {
        //get everyone applied to and attract to it
        // console.log('attracted to: ' + a.ws);
        var f = a.calculateAttraction(this); // console.log(f);

        this.applyForce(f);
      }
    }
  };
}
/*!
 * aows
 * 
 * 
 * @author Lucas Lorenzo Pena <lucaslpena@gmail.com>
 * @version 0.1.0
 * Copyright 2019. CC-BY-NC-SA-4.0 licensed.
 */
var text1 = new Blotter.Text("under construction üëÅ‚Äçüó®", {
  family: "Overpass Mono",
  size: 84,
  fill: "#171717"
});
var text2 = new Blotter.Text("Sup", {
  family: "Overpass Mono",
  size: 120,
  fill: "#171717"
});
var material = new Blotter.ChannelSplitMaterial();
var blotter1 = new Blotter(material, {
  texts: text1
});
var scope1 = blotter1.forText(text1);
scope1.appendTo(document.body); // var blotter2 = new Blotter(material, { texts : text2 });
// var scope2 = blotter2.forText(text2);
// scope2.appendTo(document.body);

setTimeout(function () {
  var element = $('.b-canvas').detach(); // $('.s00').append(element);
}, 2000); //https://codepen.io/SimonEvans/pen/PQKgyQ
// https://github.com/bradley/blotter
// https://blotter.js.org/#/documentation
/*!
 * aows
 * 
 * 
 * @author Lucas Lorenzo Pena <lucaslpena@gmail.com>
 * @version 0.1.0
 * Copyright 2019. CC-BY-NC-SA-4.0 licensed.
 */
var particles = [];
var limit = 10;
var imgs = [];
var weaksignals = [];
var keywords = [];
var attractors = [];
var jsonData = {};
var padding = 100;
var grid = 5;

function preload() {
  var jsonFile = "../data/fromspreadsheet.json";
  jsonData = loadJSON(jsonFile);
  console.log(jsonData);
}

var cnv;

var atlasObj = function (weaksignal, keyword) {
  this.kw = keyword;
  this.ws = weaksignal;
};

function centerCanvas() {
  cnv = createCanvas(windowWidth, windowHeight);
  var x = (windowWidth - width) / 2;
  var y = (windowHeight - height) / 2;
  cnv.position(x, y);
}

function windowResized() {
  centerCanvas();
}

function setup() {
  centerCanvas();
  setupWeakSignals();
  textFont("Overpass Mono");
  frameRate(60);
  weaksignals.forEach(function (ws, i) {
    keywords[i].forEach(function (kw, j) {
      var atls = new atlasObj(ws, kw);
      console.log(atls);
      particles.push(new Particle(random(50, width - 50), random(50, height - 50), {
        ws: ws,
        kw: kw
      }));
    });
  });
}

function draw() {
  // background('#ffffff');
  clear();

  for (var i = 0; i < particles.length; i++) {
    particles[i].applyGravity(); // particles[i].separate(particles);
    // particles[i].separate(attractors);

    particles[i].update();
    particles[i].display();
  }

  textSize(14);
  fill(0);
  attractors.forEach(function (a) {
    a.update();
    a.display();
  });
}

console.log('hello' + 'world'.repeat(3));

function setupWeakSignals() {
  //clipping keyword list to random selected words until wordCount reached
  for (var i in jsonData) {
    var wordCount = 5;
    var items, index, item;

    if (jsonData[i]["keywords"].length > wordCount) {
      var newItems = [];

      for (var j = 0; j < wordCount; j++) {
        items = jsonData[i]["keywords"];
        index = Math.floor(Math.random() * items.length);
        item = items.splice(index, 1);
        newItems.push(item[0]); // console.log(item[0]);
      }

      console.log(newItems);
      jsonData[i]["keywords"] = newItems.slice();
    }
  } // console.log(jsonData);
  // console.log('setup');
  // console.log(jsonData);


  var j = 0,
      k = 0;

  for (var i in jsonData) {
    console.log(j, k);
    attractors.push(new Attractor(jsonData[i]["name"], j, k));
    weaksignals.push(jsonData[i]["name"]);
    keywords.push(jsonData[i]["keywords"]); // $((".s" + j)+k).eq(i).html(jsonData[i]["name"]);

    if (j == grid - 1) {
      k++;
      j = -1;
    }

    j++;
  } // console.log(weaksignals)
  // 3 * 3 grid

}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF0dHJhY3Rvci5qcyIsInBhcnRpY2xlLmpzIiwic2NyaXB0LmpzIiwic2tldGNoLmpzIl0sIm5hbWVzIjpbIkF0dHJhY3RvciIsIndlYWtzaWduYWwiLCJ4Q29yZCIsInlDb3JkIiwid3MiLCJsZW5ndGgiLCJ3aWR0aCIsInBhZGRpbmciLCJpbnRlcnZhbCIsImdyaWQiLCJjZW50ZXJYIiwiaGVpZ2h0IiwiY2VudGVyWSIsInBvcyIsImNyZWF0ZVZlY3RvciIsInZlbCIsImFjYyIsIm1hc3MiLCJHIiwic2NhbGVyIiwiY2FsY3VsYXRlQXR0cmFjdGlvbiIsInAiLCJmb3JjZSIsInA1IiwiVmVjdG9yIiwic3ViIiwiZGlzdGFuY2UiLCJtYWciLCJjb25zdHJhaW4iLCJub3JtYWxpemUiLCJzdHJlbmd0aCIsIm11bHQiLCJhcHBseUZvcmNlIiwiZiIsImNvcHkiLCJkaXYiLCJhZGQiLCJ1cGRhdGUiLCJlZGdlcyIsInNldCIsImRpc3BsYXkiLCJwdXNoIiwic3Ryb2tlIiwidGV4dEFsaWduIiwiQ0VOVEVSIiwidGV4dCIsIngiLCJ5IiwicG9wIiwiUGFydGljbGUiLCJhIiwiYXRsYXMiLCJyYW5kb20iLCJwcmV2aW91c1ZlbCIsIm1heFNwZWVkIiwidGhldGEiLCJzaXplIiwiaGlzdG9yeSIsImxpbWl0IiwiZnJhbWVDb3VudCIsInYiLCJzcGxpY2UiLCJ0cmFpbGluZyIsImhlYWRpbmciLCJyYWRpYW5zIiwiciIsInRyYW5zbGF0ZSIsInRleHRTaXplIiwia3ciLCJpIiwiZmlsbCIsInBvaW50Iiwic2VwYXJhdGUiLCJ2ZWhpY2xlcyIsImRlc2lyZWRzZXBhcmF0aW9uIiwic3VtIiwiY291bnQiLCJkIiwiZGlzdCIsImRpZmYiLCJzdGVlciIsInZlbG9jaXR5IiwibWF4Zm9yY2UiLCJvYmoiLCJhcHBseUdyYXZpdHkiLCJhdHRyYWN0b3JzIiwidGV4dDEiLCJCbG90dGVyIiwiVGV4dCIsImZhbWlseSIsInRleHQyIiwibWF0ZXJpYWwiLCJDaGFubmVsU3BsaXRNYXRlcmlhbCIsImJsb3R0ZXIxIiwidGV4dHMiLCJzY29wZTEiLCJmb3JUZXh0IiwiYXBwZW5kVG8iLCJkb2N1bWVudCIsImJvZHkiLCJzZXRUaW1lb3V0IiwiZWxlbWVudCIsIiQiLCJkZXRhY2giLCJwYXJ0aWNsZXMiLCJpbWdzIiwid2Vha3NpZ25hbHMiLCJrZXl3b3JkcyIsImpzb25EYXRhIiwicHJlbG9hZCIsImpzb25GaWxlIiwibG9hZEpTT04iLCJjb25zb2xlIiwibG9nIiwiY252IiwiYXRsYXNPYmoiLCJrZXl3b3JkIiwiY2VudGVyQ2FudmFzIiwiY3JlYXRlQ2FudmFzIiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJwb3NpdGlvbiIsIndpbmRvd1Jlc2l6ZWQiLCJzZXR1cCIsInNldHVwV2Vha1NpZ25hbHMiLCJ0ZXh0Rm9udCIsImZyYW1lUmF0ZSIsImZvckVhY2giLCJqIiwiYXRscyIsImRyYXciLCJjbGVhciIsInJlcGVhdCIsIndvcmRDb3VudCIsIml0ZW1zIiwiaW5kZXgiLCJpdGVtIiwibmV3SXRlbXMiLCJNYXRoIiwiZmxvb3IiLCJzbGljZSIsImsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsU0FBU0EsU0FBVCxDQUFtQkMsVUFBbkIsRUFBK0JDLEtBQS9CLEVBQXNDQyxLQUF0QyxFQUE2QztBQUN6QyxPQUFLQyxFQUFMLEdBQVVILFVBQVY7QUFDQSxNQUFJSSxNQUFNLEdBQUdDLEtBQUssR0FBRyxJQUFFQyxPQUF2QjtBQUNBLE1BQUlDLFFBQVEsR0FBSUgsTUFBTSxHQUFHSSxJQUF6QjtBQUNBLE1BQUlDLE9BQU8sR0FBR0gsT0FBTyxHQUFHQyxRQUFRLElBQUlOLEtBQUssR0FBQyxDQUFWLENBQWhDO0FBQ0FRLEVBQUFBLE9BQU8sR0FBR0EsT0FBTyxHQUFHRixRQUFRLEdBQUMsQ0FBN0I7QUFDQUgsRUFBQUEsTUFBTSxHQUFHTSxNQUFNLEdBQUcsSUFBRUosT0FBcEI7QUFDQUMsRUFBQUEsUUFBUSxHQUFJSCxNQUFNLEdBQUdJLElBQXJCO0FBQ0EsTUFB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R0FBUixDQUFZZSxDQUFaLEVBQWNhLENBQWQ7QUFDQXhELElBQUFBLFVBQVUsQ0FBQzVDLElBQVgsQ0FBZ0IsSUFBSXpDLFNBQUosQ0FBYzRHLFFBQVEsQ0FBQ3ZDLENBQUQsQ0FBUixDQUFZLE1BQVosQ0FBZCxFQUFtQzJELENBQW5DLEVBQXNDYSxDQUF0QyxDQUFoQjtBQUNBbkMsSUFBQUEsV0FBVyxDQUFDakUsSUFBWixDQUFpQm1FLFFBQVEsQ0FBQ3ZDLENBQUQsQ0FBUixDQUFZLE1BQVosQ0FBakI7QUFDQXNDLElBQUFBLFFBQVEsQ0FBQ2xFLElBQVQsQ0FBY21FLFFBQVEsQ0FBQ3ZDLENBQUQsQ0FBUixDQUFZLFVBQVosQ0FBZCxFQUptQixDQUtuQjs7QUFDQSxRQUFJMkQsQ0FBQyxJQUFLdkgsSUFBSSxHQUFDLENBQWYsRUFBa0I7QUFDZG9JLE1BQUFBLENBQUM7QUFDRGIsTUFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBTDtBQUNIOztBQUNEQSxJQUFBQSxDQUFDO0FBQ0osR0FyQ3NCLENBdUN2QjtBQUNBOztBQUNIIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBBdHRyYWN0b3Iod2Vha3NpZ25hbCwgeENvcmQsIHlDb3JkKSB7XG4gICAgdGhpcy53cyA9IHdlYWtzaWduYWw7XG4gICAgdmFyIGxlbmd0aCA9IHdpZHRoIC0gMipwYWRkaW5nO1xuICAgIHZhciBpbnRlcnZhbCA9IChsZW5ndGggLyBncmlkKTtcbiAgICB2YXIgY2VudGVyWCA9IHBhZGRpbmcgKyBpbnRlcnZhbCAqICh4Q29yZCsxKTtcbiAgICBjZW50ZXJYID0gY2VudGVyWCAtIGludGVydmFsLzI7XG4gICAgbGVuZ3RoID0gaGVpZ2h0IC0gMipwYWRkaW5nO1xuICAgIGludGVydmFsID0gKGxlbmd0aCAvIGdyaWQpO1xuICAgIHZhciBjZW50ZXJZID0gcGFkZGluZyArIGludGVydmFsICogKHlDb3JkKzEpO1xuICAgIGNlbnRlclkgPSBjZW50ZXJZIC0gaW50ZXJ2YWwvMjtcblxuICAgIHRoaXMucG9zID0gY3JlYXRlVmVjdG9yKGNlbnRlclgsIGNlbnRlclkpO1xuICAgIHRoaXMudmVsID0gY3JlYXRlVmVjdG9yKDAsMCk7XG4gICAgdGhpcy5hY2MgPSBjcmVhdGVWZWN0b3IoMCwwKTtcblxuICAgIHRoaXMubWFzcyA9IDY7XG4gICAgdGhpcy5HID0gMjA7IC8vd2FzIDgwXG4gICAgdGhpcy5zY2FsZXIgPSA1O1xuXG4gICAgdGhpcy5jYWxjdWxhdGVBdHRyYWN0aW9uID0gZnVuY3Rpb24ocCl7XG4gICAgICAgIC8vY2FsY3VsYXRlIGRpcmVjdGlvbiBvZiBmb3JjZVxuICAgICAgICB2YXIgZm9yY2UgPSBwNS5WZWN0b3Iuc3ViKHRoaXMucG9zLCBwLnBvcyk7XG5cbiAgICAgICAgLy9kaXN0YW5jZSBiZXR3ZWVuIG9iamVjdHNcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gZm9yY2UubWFnKCk7XG5cbiAgICAgICAgLy9saW1pdCB2ZWN0b3IgdG8gZWxpbWluYXRlIGV4dHJlbWUgdmFsdWVzIGF0IHZlcnkgY2xvc2Ugb3IgdmVyeSBmYXJcbiAgICAgICAgLy8gZGlzdGFuY2UgPSBjb25zdHJhaW4oZGlzdGFuY2UsMjAsMjUpO1xuICAgICAgICBkaXN0YW5jZSA9IGNvbnN0cmFpbihkaXN0YW5jZSw1MCw1NSk7XG4gICAgICAgIC8vTm90IHJlYWxseSBpbXBvcnRhbnQgYnV0IGlzIHdoYXQgaXQgaXMgdG8gZ2V0IGRpcmVjdGlvblxuICAgICAgICBmb3JjZS5ub3JtYWxpemUoKTtcblxuICAgICAgICAvL2NhbGN1bGF0ZSBncmF2aXRhdGlvbmFsIGZyb20gbWFnbmlpdHVkZVxuICAgICAgICB2YXIgc3RyZW5ndGggPSAodGhpcy5HICogdGhpcy5tYXNzICogcC5tYXNzKSAvIChkaXN0YW5jZSAqIGRpc3RhbmNlKTtcblxuICAgICAgICAvL2dldCBmb3JjZSB2ZWN0b3IgLS0+IG1hZ25pdHVkZSAqIGRpcmVjdGlvblxuICAgICAgICBmb3JjZS5tdWx0KHN0cmVuZ3RoKTtcbiAgICAgICAgLy92YXIgZm9yY2U7XG4gICAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9XG5cbiAgICB0aGlzLmFwcGx5Rm9yY2UgPSBmdW5jdGlvbihmb3JjZSl7XG4gICAgICAgIC8vIEEgPSBGIC9NXG4gICAgICAgIHZhciBmID0gZm9yY2UuY29weSgpO1xuICAgICAgICBmLmRpdih0aGlzLm1hc3MpO1xuICAgICAgICB0aGlzLmFjYy5hZGQoZik7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmVkZ2VzKCk7XG4gICAgICAgIHRoaXMudmVsLmFkZCh0aGlzLmFjYyk7XG4gICAgICAgIHRoaXMucG9zLmFkZCh0aGlzLnZlbCk7XG4gICAgICAgIHRoaXMuYWNjLnNldCgwLDApO1xuICAgIH1cblxuICAgIHRoaXMuZGlzcGxheSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHB1c2goKTtcbiAgICAgICAgLy8gZmlsbCgzMCwyNSwyMCk7XG4gICAgICAgIHN0cm9rZSgzMCwyNSwzMCk7XG4gICAgICAgIC8vIGVsbGlwc2UodGhpcy5wb3MueCwgdGhpcy5wb3MueSwgdGhpcy5tYXNzICogdGhpcy5zY2FsZXIsIHRoaXMubWFzcyAqIHRoaXMuc2NhbGVyKTtcbiAgICAgICAgLy8gZmlsbCgzMCwyNSwyMCk7XG4gICAgICAgIHRleHRBbGlnbihDRU5URVIsIENFTlRFUik7XG4gICAgICAgIHRleHQodGhpcy53cywgdGhpcy5wb3MueCwgdGhpcy5wb3MueSk7XG4gICAgICAgIHBvcCgpO1xuICAgIH1cblxuICAgIHRoaXMuZWRnZXMgPSBmdW5jdGlvbigpe1xuICAgICAgICBpZiAodGhpcy5wb3MueSA+IGhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy52ZWwueSAqPSAtMTtcbiAgICAgICAgICAgIHRoaXMucG9zID0gY3JlYXRlVmVjdG9yKHdpZHRoLzIsIGhlaWdodC8yKTtcbiAgICAgICAgICAgIHRoaXMudmVsID0gY3JlYXRlVmVjdG9yKDAsMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucG9zLnggPiB3aWR0aCkge1xuICAgICAgICAgICAgdGhpcy52ZWwueCAqPSAtMTtcbiAgICAgICAgICAgIHRoaXMucG9zID0gY3JlYXRlVmVjdG9yKHdpZHRoLzIsIGhlaWdodC8yKTtcbiAgICAgICAgICAgIHRoaXMudmVsID0gY3JlYXRlVmVjdG9yKDAsMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucG9zLnggPCAwKSB7XG4gICAgICAgICAgICB0aGlzLnZlbC54ICo9IC0xO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSBjcmVhdGVWZWN0b3Iod2lkdGgvMiwgaGVpZ2h0LzIpO1xuICAgICAgICAgICAgdGhpcy52ZWwgPSBjcmVhdGVWZWN0b3IoMCwwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wb3MueSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMudmVsLnggKj0gLTE7XG4gICAgICAgICAgICB0aGlzLnBvcyA9IGNyZWF0ZVZlY3Rvcih3aWR0aC8yLCBoZWlnaHQvMik7XG4gICAgICAgICAgICB0aGlzLnZlbCA9IGNyZWF0ZVZlY3RvcigwLDApO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiZnVuY3Rpb24gUGFydGljbGUoeCx5LGEpe1xuICAgIHRoaXMuYXRsYXMgPSBhO1xuXG4gICAgdGhpcy5wb3MgPSBjcmVhdGVWZWN0b3IoeCwgeSk7XG4gICAgdGhpcy52ZWwgPSBjcmVhdGVWZWN0b3IocmFuZG9tKC0zLDMpLHJhbmRvbSgtMywzKSk7XG4gICAgdGhpcy5hY2MgPSBjcmVhdGVWZWN0b3IoMCwtOCk7XG5cbiAgICAvLyB0aGlzLnZlbCA9IGNyZWF0ZVZlY3RvcigwLDApO1xuICAgIC8vIHRoaXMuYWNjID0gY3JlYXRlVmVjdG9yKDAsMCk7XG5cbiAgICB0aGlzLm1hc3MgPSAxMDtcbiAgICB0aGlzLkcgPSA1O1xuICAgIHRoaXMucHJldmlvdXNWZWwgPSBjcmVhdGVWZWN0b3IoMCwwKTtcbiAgICB0aGlzLm1heFNwZWVkID0gMztcblxuICAgIHRoaXMudGhldGEgPSAwLjA7XG4gICAgdGhpcy5zaXplID0gMjA7XG4gICAgLy8gdGhpcy5tYXhGb3JjZSA9IDE7XG5cbiAgICB0aGlzLmhpc3RvcnkgPSBbXTtcblxuXG4gICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmVkZ2VzKCk7XG4gICAgICAgIHRoaXMudmVsLmFkZCh0aGlzLmFjYyk7XG4gICAgICAgIHRoaXMudmVsLmxpbWl0KHRoaXMubWF4U3BlZWQpO1xuICAgICAgICB0aGlzLnBvcy5hZGQodGhpcy52ZWwpO1xuICAgICAgICB0aGlzLmFjYy5zZXQoMCwwKTtcblxuXG4gICAgICAgIGlmIChmcmFtZUNvdW50ICUgMTAgPT0gMSl7XG4gICAgICAgICAgICB2YXIgdiA9IGNyZWF0ZVZlY3Rvcih0aGlzLnBvcy54LCB0aGlzLnBvcy55KTtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHYpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGlzdG9yeS5sZW5ndGggPiA4KXtcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3Rvcnkuc3BsaWNlKDAsMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnBvcyk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImN1cnJlbnQgXiBsYXN0IHZcIik7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmhpc3RvcnkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5kaXNwbGF5ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy50cmFpbGluZygpO1xuICAgICAgICB2YXIgdGhldGEgPSB0aGlzLnZlbC5oZWFkaW5nKCkgKyByYWRpYW5zKDkwKTtcbiAgICAgICAgdGhpcy50aGV0YSArPSAodGhpcy52ZWwueCAqIHRoaXMudmVsLm1hZygpKSAvIDIwO1xuICAgICAgICB2YXIgciA9IDQ7XG4gICAgICAgIHB1c2goKTtcbiAgICAgICAgdHJhbnNsYXRlKHRoaXMucG9zLngsIHRoaXMucG9zLnkpO1xuICAgICAgICAvLyByb3RhdGUodGhpcy50aGV0YSk7XG4gICAgICAgIHRleHRBbGlnbihDRU5URVIsIENFTlRFUik7XG4gICAgICAgIHRleHRTaXplKDgpO1xuICAgICAgICB0ZXh0KHRoaXMuYXRsYXMua3csIDAsMCk7XG4gICAgICAgIHBvcCgpO1xuICAgIH1cblxuICAgIHRoaXMudHJhaWxpbmcgPSBmdW5jdGlvbigpe1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaGlzdG9yeS5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5oaXN0b3J5W2ldO1xuICAgICAgICAgICAgcHVzaCgpO1xuICAgICAgICAgICAgdHJhbnNsYXRlKHBvcy54LCBwb3MueSk7XG4gICAgICAgICAgICBzdHJva2UoMTAwKTtcbiAgICAgICAgICAgIGZpbGwoMjI1KTtcblxuICAgICAgICAgICAgcG9pbnQoMCwwKTtcbiAgICAgICAgICAgIHBvcCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lZGdlcyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmICh0aGlzLnBvcy54IDwgLXRoaXMuc2l6ZSkgdGhpcy5wb3MueCA9IHdpZHRoK3RoaXMuc2l6ZTtcbiAgICAgICAgaWYgKHRoaXMucG9zLnkgPCAtdGhpcy5zaXplKSB0aGlzLnBvcy55ID0gaGVpZ2h0K3RoaXMuc2l6ZTtcbiAgICAgICAgaWYgKHRoaXMucG9zLnggPiB3aWR0aCt0aGlzLnNpemUpIHRoaXMucG9zLnggPSAtdGhpcy5zaXplO1xuICAgICAgICBpZiAodGhpcy5wb3MueSA+IGhlaWdodCt0aGlzLnNpemUpIHRoaXMucG9zLnkgPSAtdGhpcy5zaXplO1xuICAgIH1cblxuICAgIHRoaXMuc2VwYXJhdGUgPSBmdW5jdGlvbih2ZWhpY2xlcykge1xuICAgICAgICB2YXIgZGVzaXJlZHNlcGFyYXRpb24gPSB0aGlzLnNpemUqMS4xO1xuICAgICAgICB2YXIgc3VtID0gY3JlYXRlVmVjdG9yKCk7XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVoaWNsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBkID0gcDUuVmVjdG9yLmRpc3QodGhpcy5wb3MsIHZlaGljbGVzW2ldLnBvcyk7XG4gICAgICAgICAgICBpZiAoKGQgPiAwKSAmJiAoZCA8IGRlc2lyZWRzZXBhcmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIHZhciBkaWZmID0gcDUuVmVjdG9yLnN1Yih0aGlzLnBvcywgdmVoaWNsZXNbaV0ucG9zKTtcbiAgICAgICAgICAgICAgICBkaWZmLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgICAgIGRpZmYuZGl2KGQpO1xuICAgICAgICAgICAgICAgIHN1bS5hZGQoZGlmZik7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgICAgICBzdW0uZGl2KGNvdW50KTtcbiAgICAgICAgICAgIHN1bS5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgIHN1bS5tdWx0KHRoaXMubWF4U3BlZWQgKiAyKTtcbiAgICAgICAgICAgIHZhciBzdGVlciA9IHA1LlZlY3Rvci5zdWIoc3VtLCB0aGlzLnZlbG9jaXR5KTtcbiAgICAgICAgICAgIHN0ZWVyLmxpbWl0KHRoaXMubWF4Zm9yY2UpO1xuICAgICAgICAgICAgdGhpcy5hcHBseUZvcmNlKHN0ZWVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXBwbHlGb3JjZSA9IGZ1bmN0aW9uKGZvcmNlKSB7XG4gICAgICAgIHZhciBmID0gZm9yY2UuY29weSgpO1xuICAgICAgICBmLmRpdih0aGlzLm1hc3MpO1xuICAgICAgICB0aGlzLmFjYy5hZGQoZik7XG4gICAgfVxuXG4gICAgLy9jYWxjdWxhdGUgYXR0cmFjdGlvblxuICAgIHRoaXMuY2FsY3VsYXRlQXR0cmFjdGlvbiA9IGZ1bmN0aW9uKG9iail7XG4gICAgICAgIC8vY2FsY3VsYXRlIGRpcmVjdGlvbiBvZiBmb3JjZVxuICAgICAgICB2YXIgZm9yY2UgPSBwNS5WZWN0b3Iuc3ViKHRoaXMucG9zLCBvYmoucG9zKTtcblxuICAgICAgICAvL2Rpc3RhbmNlIGJldHdlZW4gb2JqZWN0c1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBmb3JjZS5tYWcoKTtcbiAgICAgICAgLy9saW1pdCB2ZWN0b3IgdG8gZWxpbWluYXRlIGV4dHJlbWUgdmFsdWVzIGF0IHZlcnkgY2xvc2Ugb3IgdmVyeSBmYXJcbiAgICAgICAgLy9kaXN0YW5jZSA9IGNvbnN0cmFpbihkaXN0YW5jZSwyMCwyNSk7XG4gICAgICAgIC8vTm90IHJlYWxseSBpbXBvcnRhbnQgYnV0IGlzIHdoYXQgaXQgaXMgdG8gZ2V0IGRpcmVjdGlvblxuICAgICAgICBmb3JjZS5ub3JtYWxpemUoKTtcblxuICAgICAgICAvL2NhbGN1bGF0ZSBncmF2aXRhdGlvbmFsIGZyb20gbWFnbmlpdHVkZVxuICAgICAgICB2YXIgc3RyZW5ndGggPSAodGhpcy5HICogdGhpcy5tYXNzICogb2JqLm1hc3MpIC8gKGRpc3RhbmNlICogZGlzdGFuY2UpO1xuXG4gICAgICAgIC8vZ2V0IGZvcmNlIHZlY3RvciAtLT4gbWFnbml0dWRlICogZGlyZWN0aW9uXG4gICAgICAgIGZvcmNlLm11bHQoc3RyZW5ndGgpO1xuICAgICAgICAvL3ZhciBmb3JjZTtcbiAgICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH1cblxuICAgIHRoaXMuYXBwbHlHcmF2aXR5ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyYWN0b3JzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciBhID0gYXR0cmFjdG9yc1tpXTtcbiAgICAgICAgICAgIGlmIChhLndzID09PSB0aGlzLmF0bGFzLndzKXsgLy9nZXQgZXZlcnlvbmUgYXBwbGllZCB0byBhbmQgYXR0cmFjdCB0byBpdFxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhdHRyYWN0ZWQgdG86ICcgKyBhLndzKTtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IGEuY2FsY3VsYXRlQXR0cmFjdGlvbih0aGlzKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhmKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5Rm9yY2UoZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCJ2YXIgdGV4dDEgPSBuZXcgQmxvdHRlci5UZXh0KFwidW5kZXIgY29uc3RydWN0aW9uIPCfkYHigI3wn5eoXCIsIHtcbiAgICBmYW1pbHkgOiBcIk92ZXJwYXNzIE1vbm9cIixcbiAgICBzaXplIDogODQsXG4gICAgZmlsbCA6IFwiIzE3MTcxN1wiXG59KTtcblxudmFyIHRleHQyID0gbmV3IEJsb3R0ZXIuVGV4dChcIlN1cFwiLCB7XG4gICAgZmFtaWx5IDogXCJPdmVycGFzcyBNb25vXCIsXG4gICAgc2l6ZSA6IDEyMCxcbiAgICBmaWxsIDogXCIjMTcxNzE3XCJcbn0pO1xuXG52YXIgbWF0ZXJpYWwgPSBuZXcgQmxvdHRlci5DaGFubmVsU3BsaXRNYXRlcmlhbCgpO1xuXG52YXIgYmxvdHRlcjEgPSBuZXcgQmxvdHRlcihtYXRlcmlhbCwgeyB0ZXh0cyA6IHRleHQxIH0pO1xudmFyIHNjb3BlMSA9IGJsb3R0ZXIxLmZvclRleHQodGV4dDEpO1xuc2NvcGUxLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpO1xuXG4vLyB2YXIgYmxvdHRlcjIgPSBuZXcgQmxvdHRlcihtYXRlcmlhbCwgeyB0ZXh0cyA6IHRleHQyIH0pO1xuLy8gdmFyIHNjb3BlMiA9IGJsb3R0ZXIyLmZvclRleHQodGV4dDIpO1xuLy8gc2NvcGUyLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpO1xuXG5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgdmFyIGVsZW1lbnQgPSAkKCcuYi1jYW52YXMnKS5kZXRhY2goKTtcbiAgICAvLyAkKCcuczAwJykuYXBwZW5kKGVsZW1lbnQpO1xufSwyMDAwKTtcblxuLy9odHRwczovL2NvZGVwZW4uaW8vU2ltb25FdmFucy9wZW4vUFFLZ3lRXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYnJhZGxleS9ibG90dGVyXG4vLyBodHRwczovL2Jsb3R0ZXIuanMub3JnLyMvZG9jdW1lbnRhdGlvbiIsInZhciBwYXJ0aWNsZXMgPSBbXTtcbnZhciBsaW1pdCA9IDEwO1xudmFyIGltZ3MgPSBbXTtcbnZhciB3ZWFrc2lnbmFscyA9IFtdO1xudmFyIGtleXdvcmRzID0gW107XG52YXIgYXR0cmFjdG9ycyA9IFtdO1xudmFyIGpzb25EYXRhID0ge307XG52YXIgcGFkZGluZyA9IDEwMDtcbnZhciBncmlkID0gNTtcblxuXG5mdW5jdGlvbiBwcmVsb2FkKCkge1xuICAgIHZhciBqc29uRmlsZSA9IFwiLi4vZGF0YS9mcm9tc3ByZWFkc2hlZXQuanNvblwiO1xuICAgIGpzb25EYXRhID0gbG9hZEpTT04oanNvbkZpbGUpO1xuICAgIGNvbnNvbGUubG9nKGpzb25EYXRhKTtcbn1cblxudmFyIGNudjtcblxuXG52YXIgYXRsYXNPYmogPSBmdW5jdGlvbih3ZWFrc2lnbmFsLCBrZXl3b3JkKXtcbiAgICB0aGlzLmt3ID0ga2V5d29yZDtcbiAgICB0aGlzLndzID0gd2Vha3NpZ25hbDtcbn07XG5cbmZ1bmN0aW9uIGNlbnRlckNhbnZhcygpIHtcbiAgICBjbnYgPSBjcmVhdGVDYW52YXMod2luZG93V2lkdGgsIHdpbmRvd0hlaWdodCk7XG4gICAgdmFyIHggPSAod2luZG93V2lkdGggLSB3aWR0aCkgLyAyO1xuICAgIHZhciB5ID0gKHdpbmRvd0hlaWdodCAtIGhlaWdodCkgLyAyO1xuICAgIGNudi5wb3NpdGlvbih4LCB5KTtcbn1cblxuZnVuY3Rpb24gd2luZG93UmVzaXplZCgpIHtcbiAgICBjZW50ZXJDYW52YXMoKTtcbn1cblxuZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgY2VudGVyQ2FudmFzKCk7XG4gICAgc2V0dXBXZWFrU2lnbmFscygpO1xuICAgIHRleHRGb250KFwiT3ZlcnBhc3MgTW9ub1wiKTtcbiAgICBmcmFtZVJhdGUoNjApO1xuXG4gICAgd2Vha3NpZ25hbHMuZm9yRWFjaChmdW5jdGlvbih3cywgaSl7XG4gICAgICAgIGtleXdvcmRzW2ldLmZvckVhY2goZnVuY3Rpb24oa3csIGope1xuICAgICAgICAgICAgdmFyIGF0bHMgPSBuZXcgYXRsYXNPYmood3MsIGt3KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGF0bHMpO1xuICAgICAgICAgICAgcGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlKHJhbmRvbSg1MCwgd2lkdGggLSA1MCksIHJhbmRvbSg1MCwgaGVpZ2h0IC0gNTApLCB7d3M6d3MsIGt3Omt3fSkpO1xuICAgICAgICB9KTtcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBkcmF3KCkge1xuICAgIC8vIGJhY2tncm91bmQoJyNmZmZmZmYnKTtcbiAgICBjbGVhcigpO1xuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRpY2xlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwYXJ0aWNsZXNbaV0uYXBwbHlHcmF2aXR5KCk7XG4gICAgICAgIC8vIHBhcnRpY2xlc1tpXS5zZXBhcmF0ZShwYXJ0aWNsZXMpO1xuICAgICAgICAvLyBwYXJ0aWNsZXNbaV0uc2VwYXJhdGUoYXR0cmFjdG9ycyk7XG4gICAgICAgIHBhcnRpY2xlc1tpXS51cGRhdGUoKTtcbiAgICAgICAgcGFydGljbGVzW2ldLmRpc3BsYXkoKTtcbiAgICB9XG5cbiAgICB0ZXh0U2l6ZSgxNCk7XG4gICAgZmlsbCgwKTtcbiAgICBhdHRyYWN0b3JzLmZvckVhY2goZnVuY3Rpb24oYSl7XG4gICAgICAgIGEudXBkYXRlKCk7XG4gICAgICAgIGEuZGlzcGxheSgpO1xuICAgIH0pO1xufVxuXG5jb25zb2xlLmxvZygnaGVsbG8nKyd3b3JsZCcucmVwZWF0KDMpKTtcblxuZnVuY3Rpb24gc2V0dXBXZWFrU2lnbmFscygpe1xuXG4gICAgLy9jbGlwcGluZyBrZXl3b3JkIGxpc3QgdG8gcmFuZG9tIHNlbGVjdGVkIHdvcmRzIHVudGlsIHdvcmRDb3VudCByZWFjaGVkXG4gICAgZm9yICh2YXIgaSBpbiBqc29uRGF0YSl7XG4gICAgICAgIHZhciB3b3JkQ291bnQgPSA1O1xuICAgICAgICB2YXIgaXRlbXMsIGluZGV4LCBpdGVtO1xuICAgICAgICBpZiAoanNvbkRhdGFbaV1bXCJrZXl3b3Jkc1wiXS5sZW5ndGggPiB3b3JkQ291bnQpIHtcbiAgICAgICAgICAgIHZhciBuZXdJdGVtcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB3b3JkQ291bnQ7IGorKykge1xuICAgICAgICAgICAgICAgIGl0ZW1zID0ganNvbkRhdGFbaV1bXCJrZXl3b3Jkc1wiXTtcbiAgICAgICAgICAgICAgICBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGl0ZW1zLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgbmV3SXRlbXMucHVzaChpdGVtWzBdKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpdGVtWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG5ld0l0ZW1zKTtcbiAgICAgICAgICAgIGpzb25EYXRhW2ldW1wia2V5d29yZHNcIl0gPSBuZXdJdGVtcy5zbGljZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKGpzb25EYXRhKTtcblxuXG4gICAgLy8gY29uc29sZS5sb2coJ3NldHVwJyk7XG4gICAgLy8gY29uc29sZS5sb2coanNvbkRhdGEpO1xuXG4gICAgdmFyIGogPSAwLCBrID0gMDtcbiAgICBmb3IgKHZhciBpIGluIGpzb25EYXRhKXtcbiAgICAgICAgY29uc29sZS5sb2coaixrKTtcbiAgICAgICAgYXR0cmFjdG9ycy5wdXNoKG5ldyBBdHRyYWN0b3IoanNvbkRhdGFbaV1bXCJuYW1lXCJdLCBqLCBrKSk7XG4gICAgICAgIHdlYWtzaWduYWxzLnB1c2goanNvbkRhdGFbaV1bXCJuYW1lXCJdKTtcbiAgICAgICAga2V5d29yZHMucHVzaChqc29uRGF0YVtpXVtcImtleXdvcmRzXCJdKTtcbiAgICAgICAgLy8gJCgoXCIuc1wiICsgaikraykuZXEoaSkuaHRtbChqc29uRGF0YVtpXVtcIm5hbWVcIl0pO1xuICAgICAgICBpZiAoaiA9PSAoZ3JpZC0xKSl7XG4gICAgICAgICAgICBrKys7XG4gICAgICAgICAgICBqID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaisrO1xuICAgIH1cblxuICAgIC8vIGNvbnNvbGUubG9nKHdlYWtzaWduYWxzKVxuICAgIC8vIDMgKiAzIGdyaWRcbn1cblxuXG4iXX0=
