/*!
 * aows
 * 
 * 
 * @author Lucas Lorenzo Pena <lucaslpena@gmail.com>
 * @version 0.1.0
 * Copyright 2019. CC-BY-NC-SA-4.0 licensed.
 */
function Attractor(weaksignal) {
  this.ws = weaksignal;
  this.pos = createVector(width / 2, height / 2);
  this.vel = createVector(0, 0);
  this.acc = createVector(0, 0);
  this.mass = 20;
  this.G = 20; //was 80

  this.scaler = 5;

  this.calculateAttraction = function (p) {
    //calculate direction of force
    var force = p5.Vector.sub(this.pos, p.pos); //distance between objects

    var distance = force.mag(); //limit vector to eliminate extreme values at very close or very far
    // distance = constrain(distance,20,25);

    distance = constrain(distance, 50, 55); //Not really important but is what it is to get direction

    force.normalize(); //calculate gravitational from magniitude

    var strength = this.G * this.mass * p.mass / (distance * distance); //get force vector --> magnitude * direction

    force.mult(strength); //var force;

    return force;
  };

  this.applyForce = function (force) {
    // A = F /M
    var f = force.copy();
    f.div(this.mass);
    this.acc.add(f);
  };

  this.update = function () {
    this.edges();
    this.vel.add(this.acc);
    this.pos.add(this.vel);
    this.acc.set(0, 0);
  };

  this.display = function () {
    push(); // fill(30,25,20);

    stroke(30, 25, 30); // ellipse(this.pos.x, this.pos.y, this.mass * this.scaler, this.mass * this.scaler);
    // fill(30,25,20);

    textAlign(CENTER, CENTER);
    text(this.ws, this.pos.x, this.pos.y);
    pop();
  };

  this.edges = function () {
    if (this.pos.y > height) {
      this.vel.y *= -1;
      this.pos = createVector(width / 2, height / 2);
      this.vel = createVector(0, 0);
    }

    if (this.pos.x > width) {
      this.vel.x *= -1;
      this.pos = createVector(width / 2, height / 2);
      this.vel = createVector(0, 0);
    }

    if (this.pos.x < 0) {
      this.vel.x *= -1;
      this.pos = createVector(width / 2, height / 2);
      this.vel = createVector(0, 0);
    }

    if (this.pos.y < 0) {
      this.vel.x *= -1;
      this.pos = createVector(width / 2, height / 2);
      this.vel = createVector(0, 0);
    }
  };
}
/*!
 * aows
 * 
 * 
 * @author Lucas Lorenzo Pena <lucaslpena@gmail.com>
 * @version 0.1.0
 * Copyright 2019. CC-BY-NC-SA-4.0 licensed.
 */
function Particle(x, y, a) {
  this.atlas = a;
  this.pos = createVector(x, y);
  this.vel = createVector(random(-3, 3), random(-3, 3));
  this.acc = createVector(0, -8); // this.vel = createVector(0,0);
  // this.acc = createVector(0,0);

  this.mass = 10;
  this.G = 5;
  this.previousVel = createVector(0, 0);
  this.maxSpeed = 5;
  this.theta = 0.0;
  this.size = 20; // this.maxForce = 1;

  this.spawn = function () {};

  this.update = function () {
    // this.spawn();
    this.edges();
    this.vel.add(this.acc);
    this.vel.limit(this.maxSpeed);
    this.pos.add(this.vel);
    this.acc.set(0, 0);
  };

  this.display = function () {
    var theta = this.vel.heading() + radians(90);
    this.theta += this.vel.x * this.vel.mag() / 20;
    var r = 4;
    push();
    translate(this.pos.x, this.pos.y); // rotate(this.theta);
    // rect(0,0,this.size,this.size);

    textAlign(CENTER, CENTER);
    textSize(15);
    text(this.atlas.kw, 0, 0); // if (this.paused) { //paused
    //print('paused');
    //print('frozen');
    // this.paused = false;
    // this.frozen = true;
    // this.img.pause();
    // }
    // if (this.img.loaded()){
    //   image(this.img, this.size/-2, this.size/-2, this.size, this.size);
    // }

    pop();
  };

  this.edges = function () {
    if (this.pos.x < -this.size) this.pos.x = width + this.size;
    if (this.pos.y < -this.size) this.pos.y = height + this.size;
    if (this.pos.x > width + this.size) this.pos.x = -this.size;
    if (this.pos.y > height + this.size) this.pos.y = -this.size;
  };

  this.separate = function (vehicles) {
    var desiredseparation = this.size * 1.1;
    var sum = createVector();
    var count = 0;

    for (var i = 0; i < vehicles.length; i++) {
      var d = p5.Vector.dist(this.pos, vehicles[i].pos);

      if (d > 0 && d < desiredseparation) {
        var diff = p5.Vector.sub(this.pos, vehicles[i].pos);
        diff.normalize();
        diff.div(d);
        sum.add(diff);
        count++;
      }
    }

    if (count > 0) {
      sum.div(count);
      sum.normalize();
      sum.mult(this.maxSpeed * 10);
      var steer = p5.Vector.sub(sum, this.velocity);
      steer.limit(this.maxforce);
      this.applyForce(steer);
    }
  };

  this.applyForce = function (force) {
    var f = force.copy();
    f.div(this.mass);
    this.acc.add(f);
  }; //calculate attraction


  this.calculateAttraction = function (obj) {
    //calculate direction of force
    var force = p5.Vector.sub(this.pos, obj.pos); //distance between objects

    var distance = force.mag(); //limit vector to eliminate extreme values at very close or very far
    //distance = constrain(distance,20,25);
    //Not really important but is what it is to get direction

    force.normalize(); //calculate gravitational from magniitude

    var strength = this.G * this.mass * obj.mass / (distance * distance); //get force vector --> magnitude * direction

    force.mult(strength); //var force;

    return force;
  };

  this.applyGravity = function () {
    for (var i = 0; i < attractors.length; i++) {
      var a = attractors[i];

      if (a.ws === this.atlas.ws) {
        //get everyone applied to and attract to it
        // console.log('attracted to: ' + a.ws);
        var f = a.calculateAttraction(this); // console.log(f);

        this.applyForce(f);
      }
    }
  };
}
/*!
 * aows
 * 
 * 
 * @author Lucas Lorenzo Pena <lucaslpena@gmail.com>
 * @version 0.1.0
 * Copyright 2019. CC-BY-NC-SA-4.0 licensed.
 */
var particles = [];
var limit = 10;
var imgs = [];
var weaksignals = [];
var keywords = [];
var attractors = [];

function preload() {}

var cnv;

var atlasObj = function (weaksignal, keyword) {
  this.kw = keyword;
  this.ws = weaksignal;
};

function centerCanvas() {
  cnv = createCanvas(windowWidth, windowHeight);
  var x = (windowWidth - width) / 2;
  var y = (windowHeight - height) / 2;
  cnv.position(x, y);
}

function windowResized() {
  centerCanvas();
}

function setup() {
  centerCanvas();
  setupWeakSignals();
  textFont("Overpass Mono");
  frameRate(60); // for (var i = 0; i < limit; i++) {
  //     var imgLoc = (floor(random(1, imgs.length)) - 1);
  //     var img = imgs[i];
  //     particles.push(new Particle(random(50, width - 50), random(50, height - 50), img));
  // }

  weaksignals.forEach(function (ws, i) {
    keywords[0].forEach(function (kw, i) {
      var atls = new atlasObj(ws, kw);
      console.log(atls);
      particles.push(new Particle(random(50, width - 50), random(50, height - 50), {
        ws: ws,
        kw: kw
      }));
    });
  });
}

function draw() {
  background('#000');

  for (var i = 0; i < particles.length; i++) {
    particles[i].applyGravity(); // particles[i].separate(particles);
    // particles[i].separate(attractors);

    particles[i].update();
    particles[i].display();
  }

  fill(100);
  textSize(32); // text("   The Future Is Now", mouseX, mouseY, 600, 200);
  // weaksignals.forEach(function(ws){
  //     ellipse(width/2, height/2, 200, 200);

  fill(255); //     text(ws, width/2, height/2, 200, 200); // todo -- create with box and align to center of that box
  // });

  attractors.forEach(function (a) {
    a.update();
    a.display();
  });
}

console.log('hello' + 'world'.repeat(3));

function setupWeakSignals() {
  // load from file...
  // into array
  console.log('setup');
  weaksignals.push("AI Bias");
  attractors.push(new Attractor("AI Bias"));
  keywords.push(["exclusion", "data set", "ai ethics", "manipulation"]);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF0dHJhY3Rvci5qcyIsInBhcnRpY2xlLmpzIiwic2tldGNoLmpzIl0sIm5hbWVzIjpbIkF0dHJhY3RvciIsIndlYWtzaWduYWwiLCJ3cyIsInBvcyIsImNyZWF0ZVZlY3RvciIsIndpZHRoIiwiaGVpZ2h0IiwidmVsIiwiYWNjIiwibWFzcyIsIkciLCJzY2FsZXIiLCJjYWxjdWxhdGVBdHRyYWN0aW9uIiwicCIsImZvcmNlIiwicDUiLCJWZWN0b3IiLCJzdWIiLCJkaXN0YW5jZSIsIm1hZyIsImNvbnN0cmFpbiIsIm5vcm1hbGl6ZSIsInN0cmVuZ3RoIiwibXVsdCIsImFwcGx5Rm9yY2UiLCJmIiwiY29weSIsImRpdiIsImFkZCIsInVwZGF0ZSIsImVkZ2VzIiwic2V0IiwiZGlzcGxheSIsInB1c2giLCJzdHJva2UiLCJ0ZXh0QWxpZ24iLCJDRU5URVIiLCJ0ZXh0IiwieCIsInkiLCJwb3AiLCJQYXJ0aWNsZSIsImEiLCJhdGxhcyIsInJhbmRvbSIsInByZXZpb3VzVmVsIiwibWF4U3BlZWQiLCJ0aGV0YSIsInNpemUiLCJzcGF3biIsImxpbWl0IiwiaGVhZGluZyIsInJhZGlhbnMiLCJyIiwidHJhbnNsYXRlIiwidGV4dFNpemUiLCJrdyIsInNlcGFyYXRlIiwidmVoaWNsZXMiLCJkZXNpcmVkc2VwYXJhdGlvbiIsInN1bSIsImNvdW50IiwiaSIsImxlbmd0aCIsImQiLCJkaXN0IiwiZGlmZiIsInN0ZWVyIiwidmVsb2NpdHkiLCJtYXhmb3JjZSIsIm9iaiIsImFwcGx5R3Jhdml0eSIsImF0dHJhY3RvcnMiLCJwYXJ0aWNsZXMiLCJpbWdzIiwid2Vha3NpZ25hbHMiLCJrZXl3b3JkcyIsInByZWxvYWQiLCJjbnYiLCJhdGxhc09iaiIsImtleXdvcmQiLCJjZW50ZXJDYW52YXMiLCJjcmVhdGVDYW52YXMiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsInBvc2l0aW9uIiwid2luZG93UmVzaXplZCIsInNldHVwIiwic2V0dXBXZWFrU2lnbmFscyIsInRleHRGb250IiwiZnJhbWVSYXRlIiwiZm9yRWFjaCIsImF0bHMiLCJjb25zb2xlIiwibG9nIiwiZHJhdyIsImJhY2tncm91bmQiLCJmaWxsIiwicmVwZWF0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLFNBQVNBLFNBQVQsQ0FBbUJDLFVBQW5CLEVBQStCO0FBQzNCLE9BQUtDLEVBQUwsR0FBVUQsVUFBVjtBQUVBLE9BQUtFLEdBQUwsR0FBV0MsWUFBWSxDQUFDQyxLQUFLLEdBQUMsQ0FBUCxFQUFVQyxNQUFNLEdBQUMsQ0FBakIsQ0FBdkI7QUFDQSxPQUFLQyxHQUFMLEdBQVdILFlBQVksQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUF2QjtBQUNBLE9BQUtJLEdBQUwsR0FBV0osWUFBWSxDQUFDLENBQUQsRUFBRyxDQUFILENBQXZCO0FBRUEsT0FBS0ssSUFBTCxHQUFZLEVBQVo7QUFDQSxPQUFLQyxDQUFMLEdBQVMsRUFBVCxDQVIyQixDQVFkOztBQUNiLE9BQUtDLE1BQUwsR0FBYyxDQUFkOztBQUVBLE9BQUtDLG1CQUFMLEdBQTJCLFVBQVNDLENBQVQsRUFBVztBQUNsQztBQUNBLFFBQUlDLEtBQUssR0FBR0MsRUFBRSxDQUFDQyxNQUFILENBQVVDLEdBQVYsQ0FBYyxLQUFLZCxHQUFuQixFQUF3QlUsQ0FBQyxDQUFDVixHQUExQixDQUFaLENBRmtDLENBSWxDOztBQUNBLFFBQUllLFFBQVEsR0FBR0osS0FBSyxDQUFDSyxHQUFOLEVBQWYsQ0FMa0MsQ0FPbEM7QUFDQTs7QUFDQUQsSUFBQUEsUUFBUSxHQUFHRSxTQUFTLENBQUNGLFFBQUQsRUFBVSxFQUFWLEVBQWEsRUFBYixDQUFwQixDQVRrQyxDQVVsQzs7QUFDQUosSUFBQUEsS0FBSyxDQUFDTyxTQUFOLEdBWGtDLENBYWxDOztBQUNBLFFBQUlDLFFBQVEsR0FBSSxLQUFLWixDQUFMLEdBQVMsS0FBS0QsSUFBZCxHQUFxQkksQ0FBQyxDQUFDSixJQUF4QixJQUFpQ1MsUUFBUSxHQUFHQSxRQUE1QyxDQUFmLENBZGtDLENBZ0JsQzs7QUFD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QUFDWCxDQUFELENBQVQsQ0FBYWpDLE1BQWI7QUFDQTRDLElBQUFBLFNBQVMsQ0FBQ1gsQ0FBRCxDQUFULENBQWE5QixPQUFiO0FBQ0g7O0FBRURpRSxFQUFBQSxJQUFJLENBQUMsR0FBRCxDQUFKO0FBQ0ExQyxFQUFBQSxRQUFRLENBQUMsRUFBRCxDQUFSLENBWlksQ0FhWjtBQUdBO0FBQ0E7O0FBQ0kwQyxFQUFBQSxJQUFJLENBQUMsR0FBRCxDQUFKLENBbEJRLENBbUJaO0FBQ0E7O0FBRUF6QixFQUFBQSxVQUFVLENBQUNtQixPQUFYLENBQW1CLFVBQVNqRCxDQUFULEVBQVc7QUFDMUJBLElBQUFBLENBQUMsQ0FBQ2IsTUFBRjtBQUNBYSxJQUFBQSxDQUFDLENBQUNWLE9BQUY7QUFDSCxHQUhEO0FBSUg7O0FBRUQ2RCxPQUFPLENBQUNDLEdBQVIsQ0FBWSxVQUFRLFFBQVFJLE1BQVIsQ0FBZSxDQUFmLENBQXBCOztBQUVBLFNBQVNWLGdCQUFULEdBQTJCO0FBQ3ZCO0FBQ0E7QUFDQUssRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksT0FBWjtBQUVBbkIsRUFBQUEsV0FBVyxDQUFDMUMsSUFBWixDQUFpQixTQUFqQjtBQUVBdUMsRUFBQUEsVUFBVSxDQUFDdkMsSUFBWCxDQUFnQixJQUFJakMsU0FBSixDQUFjLFNBQWQsQ0FBaEI7QUFFQTRFLEVBQUFBLFFBQVEsQ0FBQzNDLElBQVQsQ0FBYyxDQUFDLFdBQUQsRUFBYSxVQUFiLEVBQXlCLFdBQXpCLEVBQXNDLGNBQXRDLENBQWQ7QUFDSCIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gQXR0cmFjdG9yKHdlYWtzaWduYWwpIHtcbiAgICB0aGlzLndzID0gd2Vha3NpZ25hbDtcblxuICAgIHRoaXMucG9zID0gY3JlYXRlVmVjdG9yKHdpZHRoLzIsIGhlaWdodC8yKTtcbiAgICB0aGlzLnZlbCA9IGNyZWF0ZVZlY3RvcigwLDApO1xuICAgIHRoaXMuYWNjID0gY3JlYXRlVmVjdG9yKDAsMCk7XG5cbiAgICB0aGlzLm1hc3MgPSAyMDtcbiAgICB0aGlzLkcgPSAyMDsgLy93YXMgODBcbiAgICB0aGlzLnNjYWxlciA9IDU7XG5cbiAgICB0aGlzLmNhbGN1bGF0ZUF0dHJhY3Rpb24gPSBmdW5jdGlvbihwKXtcbiAgICAgICAgLy9jYWxjdWxhdGUgZGlyZWN0aW9uIG9mIGZvcmNlXG4gICAgICAgIHZhciBmb3JjZSA9IHA1LlZlY3Rvci5zdWIodGhpcy5wb3MsIHAucG9zKTtcblxuICAgICAgICAvL2Rpc3RhbmNlIGJldHdlZW4gb2JqZWN0c1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBmb3JjZS5tYWcoKTtcblxuICAgICAgICAvL2xpbWl0IHZlY3RvciB0byBlbGltaW5hdGUgZXh0cmVtZSB2YWx1ZXMgYXQgdmVyeSBjbG9zZSBvciB2ZXJ5IGZhclxuICAgICAgICAvLyBkaXN0YW5jZSA9IGNvbnN0cmFpbihkaXN0YW5jZSwyMCwyNSk7XG4gICAgICAgIGRpc3RhbmNlID0gY29uc3RyYWluKGRpc3RhbmNlLDUwLDU1KTtcbiAgICAgICAgLy9Ob3QgcmVhbGx5IGltcG9ydGFudCBidXQgaXMgd2hhdCBpdCBpcyB0byBnZXQgZGlyZWN0aW9uXG4gICAgICAgIGZvcmNlLm5vcm1hbGl6ZSgpO1xuXG4gICAgICAgIC8vY2FsY3VsYXRlIGdyYXZpdGF0aW9uYWwgZnJvbSBtYWduaWl0dWRlXG4gICAgICAgIHZhciBzdHJlbmd0aCA9ICh0aGlzLkcgKiB0aGlzLm1hc3MgKiBwLm1hc3MpIC8gKGRpc3RhbmNlICogZGlzdGFuY2UpO1xuXG4gICAgICAgIC8vZ2V0IGZvcmNlIHZlY3RvciAtLT4gbWFnbml0dWRlICogZGlyZWN0aW9uXG4gICAgICAgIGZvcmNlLm11bHQoc3RyZW5ndGgpO1xuICAgICAgICAvL3ZhciBmb3JjZTtcbiAgICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH1cblxuICAgIHRoaXMuYXBwbHlGb3JjZSA9IGZ1bmN0aW9uKGZvcmNlKXtcbiAgICAgICAgLy8gQSA9IEYgL01cbiAgICAgICAgdmFyIGYgPSBmb3JjZS5jb3B5KCk7XG4gICAgICAgIGYuZGl2KHRoaXMubWFzcyk7XG4gICAgICAgIHRoaXMuYWNjLmFkZChmKTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuZWRnZXMoKTtcbiAgICAgICAgdGhpcy52ZWwuYWRkKHRoaXMuYWNjKTtcbiAgICAgICAgdGhpcy5wb3MuYWRkKHRoaXMudmVsKTtcbiAgICAgICAgdGhpcy5hY2Muc2V0KDAsMCk7XG4gICAgfVxuXG4gICAgdGhpcy5kaXNwbGF5ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgcHVzaCgpO1xuICAgICAgICAvLyBmaWxsKDMwLDI1LDIwKTtcbiAgICAgICAgc3Ryb2tlKDMwLDI1LDMwKTtcbiAgICAgICAgLy8gZWxsaXBzZSh0aGlzLnBvcy54LCB0aGlzLnBvcy55LCB0aGlzLm1hc3MgKiB0aGlzLnNjYWxlciwgdGhpcy5tYXNzICogdGhpcy5zY2FsZXIpO1xuICAgICAgICAvLyBmaWxsKDMwLDI1LDIwKTtcbiAgICAgICAgdGV4dEFsaWduKENFTlRFUiwgQ0VOVEVSKTtcbiAgICAgICAgdGV4dCh0aGlzLndzLCB0aGlzLnBvcy54LCB0aGlzLnBvcy55KTtcbiAgICAgICAgcG9wKCk7XG4gICAgfVxuXG4gICAgdGhpcy5lZGdlcyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmICh0aGlzLnBvcy55ID4gaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLnZlbC55ICo9IC0xO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSBjcmVhdGVWZWN0b3Iod2lkdGgvMiwgaGVpZ2h0LzIpO1xuICAgICAgICAgICAgdGhpcy52ZWwgPSBjcmVhdGVWZWN0b3IoMCwwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wb3MueCA+IHdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLnZlbC54ICo9IC0xO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSBjcmVhdGVWZWN0b3Iod2lkdGgvMiwgaGVpZ2h0LzIpO1xuICAgICAgICAgICAgdGhpcy52ZWwgPSBjcmVhdGVWZWN0b3IoMCwwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wb3MueCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMudmVsLnggKj0gLTE7XG4gICAgICAgICAgICB0aGlzLnBvcyA9IGNyZWF0ZVZlY3Rvcih3aWR0aC8yLCBoZWlnaHQvMik7XG4gICAgICAgICAgICB0aGlzLnZlbCA9IGNyZWF0ZVZlY3RvcigwLDApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBvcy55IDwgMCkge1xuICAgICAgICAgICAgdGhpcy52ZWwueCAqPSAtMTtcbiAgICAgICAgICAgIHRoaXMucG9zID0gY3JlYXRlVmVjdG9yKHdpZHRoLzIsIGhlaWdodC8yKTtcbiAgICAgICAgICAgIHRoaXMudmVsID0gY3JlYXRlVmVjdG9yKDAsMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCJmdW5jdGlvbiBQYXJ0aWNsZSh4LHksYSl7XG4gICAgdGhpcy5hdGxhcyA9IGE7XG5cbiAgICB0aGlzLnBvcyA9IGNyZWF0ZVZlY3Rvcih4LCB5KTtcbiAgICB0aGlzLnZlbCA9IGNyZWF0ZVZlY3RvcihyYW5kb20oLTMsMykscmFuZG9tKC0zLDMpKTtcbiAgICB0aGlzLmFjYyA9IGNyZWF0ZVZlY3RvcigwLC04KTtcblxuICAgIC8vIHRoaXMudmVsID0gY3JlYXRlVmVjdG9yKDAsMCk7XG4gICAgLy8gdGhpcy5hY2MgPSBjcmVhdGVWZWN0b3IoMCwwKTtcblxuICAgIHRoaXMubWFzcyA9IDEwO1xuICAgIHRoaXMuRyA9IDU7XG4gICAgdGhpcy5wcmV2aW91c1ZlbCA9IGNyZWF0ZVZlY3RvcigwLDApO1xuICAgIHRoaXMubWF4U3BlZWQgPSA1O1xuXG4gICAgdGhpcy50aGV0YSA9IDAuMDtcbiAgICB0aGlzLnNpemUgPSAyMDtcbiAgICAvLyB0aGlzLm1heEZvcmNlID0gMTtcblxuXG5cbiAgICB0aGlzLnNwYXduID0gZnVuY3Rpb24oKXtcblxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gdGhpcy5zcGF3bigpO1xuICAgICAgICB0aGlzLmVkZ2VzKCk7XG4gICAgICAgIHRoaXMudmVsLmFkZCh0aGlzLmFjYyk7XG4gICAgICAgIHRoaXMudmVsLmxpbWl0KHRoaXMubWF4U3BlZWQpO1xuICAgICAgICB0aGlzLnBvcy5hZGQodGhpcy52ZWwpO1xuICAgICAgICB0aGlzLmFjYy5zZXQoMCwwKTtcbiAgICB9XG5cbiAgICB0aGlzLmRpc3BsYXkgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgdGhldGEgPSB0aGlzLnZlbC5oZWFkaW5nKCkgKyByYWRpYW5zKDkwKTtcbiAgICAgICAgdGhpcy50aGV0YSArPSAodGhpcy52ZWwueCAqIHRoaXMudmVsLm1hZygpKSAvIDIwO1xuICAgICAgICB2YXIgciA9IDQ7XG4gICAgICAgIHB1c2goKTtcbiAgICAgICAgdHJhbnNsYXRlKHRoaXMucG9zLngsIHRoaXMucG9zLnkpO1xuICAgICAgICAvLyByb3RhdGUodGhpcy50aGV0YSk7XG5cbiAgICAgICAgLy8gcmVjdCgwLDAsdGhpcy5zaXplLHRoaXMuc2l6ZSk7XG4gICAgICAgIHRleHRBbGlnbihDRU5URVIsIENFTlRFUik7XG4gICAgICAgIHRleHRTaXplKDE1KTtcbiAgICAgICAgdGV4dCh0aGlzLmF0bGFzLmt3LCAwLDApO1xuICAgICAgICAvLyBpZiAodGhpcy5wYXVzZWQpIHsgLy9wYXVzZWRcbiAgICAgICAgLy9wcmludCgncGF1c2VkJyk7XG4gICAgICAgIC8vcHJpbnQoJ2Zyb3plbicpO1xuICAgICAgICAvLyB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAvLyB0aGlzLmZyb3plbiA9IHRydWU7XG4gICAgICAgIC8vIHRoaXMuaW1nLnBhdXNlKCk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gaWYgKHRoaXMuaW1nLmxvYWRlZCgpKXtcbiAgICAgICAgLy8gICBpbWFnZSh0aGlzLmltZywgdGhpcy5zaXplLy0yLCB0aGlzLnNpemUvLTIsIHRoaXMuc2l6ZSwgdGhpcy5zaXplKTtcbiAgICAgICAgLy8gfVxuICAgICAgICBwb3AoKTtcbiAgICB9XG5cbiAgICB0aGlzLmVkZ2VzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaWYgKHRoaXMucG9zLnggPCAtdGhpcy5zaXplKSB0aGlzLnBvcy54ID0gd2lkdGgrdGhpcy5zaXplO1xuICAgICAgICBpZiAodGhpcy5wb3MueSA8IC10aGlzLnNpemUpIHRoaXMucG9zLnkgPSBoZWlnaHQrdGhpcy5zaXplO1xuICAgICAgICBpZiAodGhpcy5wb3MueCA+IHdpZHRoK3RoaXMuc2l6ZSkgdGhpcy5wb3MueCA9IC10aGlzLnNpemU7XG4gICAgICAgIGlmICh0aGlzLnBvcy55ID4gaGVpZ2h0K3RoaXMuc2l6ZSkgdGhpcy5wb3MueSA9IC10aGlzLnNpemU7XG4gICAgfVxuXG4gICAgdGhpcy5zZXBhcmF0ZSA9IGZ1bmN0aW9uKHZlaGljbGVzKSB7XG4gICAgICAgIHZhciBkZXNpcmVkc2VwYXJhdGlvbiA9IHRoaXMuc2l6ZSoxLjE7XG4gICAgICAgIHZhciBzdW0gPSBjcmVhdGVWZWN0b3IoKTtcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZWhpY2xlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGQgPSBwNS5WZWN0b3IuZGlzdCh0aGlzLnBvcywgdmVoaWNsZXNbaV0ucG9zKTtcbiAgICAgICAgICAgIGlmICgoZCA+IDApICYmIChkIDwgZGVzaXJlZHNlcGFyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpZmYgPSBwNS5WZWN0b3Iuc3ViKHRoaXMucG9zLCB2ZWhpY2xlc1tpXS5wb3MpO1xuICAgICAgICAgICAgICAgIGRpZmYubm9ybWFsaXplKCk7XG4gICAgICAgICAgICAgICAgZGlmZi5kaXYoZCk7XG4gICAgICAgICAgICAgICAgc3VtLmFkZChkaWZmKTtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgICAgIHN1bS5kaXYoY291bnQpO1xuICAgICAgICAgICAgc3VtLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgc3VtLm11bHQodGhpcy5tYXhTcGVlZCAqIDEwKTtcbiAgICAgICAgICAgIHZhciBzdGVlciA9IHA1LlZlY3Rvci5zdWIoc3VtLCB0aGlzLnZlbG9jaXR5KTtcbiAgICAgICAgICAgIHN0ZWVyLmxpbWl0KHRoaXMubWF4Zm9yY2UpO1xuICAgICAgICAgICAgdGhpcy5hcHBseUZvcmNlKHN0ZWVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXBwbHlGb3JjZSA9IGZ1bmN0aW9uKGZvcmNlKSB7XG4gICAgICAgIHZhciBmID0gZm9yY2UuY29weSgpO1xuICAgICAgICBmLmRpdih0aGlzLm1hc3MpO1xuICAgICAgICB0aGlzLmFjYy5hZGQoZik7XG4gICAgfVxuXG4gICAgLy9jYWxjdWxhdGUgYXR0cmFjdGlvblxuICAgIHRoaXMuY2FsY3VsYXRlQXR0cmFjdGlvbiA9IGZ1bmN0aW9uKG9iail7XG4gICAgICAgIC8vY2FsY3VsYXRlIGRpcmVjdGlvbiBvZiBmb3JjZVxuICAgICAgICB2YXIgZm9yY2UgPSBwNS5WZWN0b3Iuc3ViKHRoaXMucG9zLCBvYmoucG9zKTtcblxuICAgICAgICAvL2Rpc3RhbmNlIGJldHdlZW4gb2JqZWN0c1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBmb3JjZS5tYWcoKTtcbiAgICAgICAgLy9saW1pdCB2ZWN0b3IgdG8gZWxpbWluYXRlIGV4dHJlbWUgdmFsdWVzIGF0IHZlcnkgY2xvc2Ugb3IgdmVyeSBmYXJcbiAgICAgICAgLy9kaXN0YW5jZSA9IGNvbnN0cmFpbihkaXN0YW5jZSwyMCwyNSk7XG4gICAgICAgIC8vTm90IHJlYWxseSBpbXBvcnRhbnQgYnV0IGlzIHdoYXQgaXQgaXMgdG8gZ2V0IGRpcmVjdGlvblxuICAgICAgICBmb3JjZS5ub3JtYWxpemUoKTtcblxuICAgICAgICAvL2NhbGN1bGF0ZSBncmF2aXRhdGlvbmFsIGZyb20gbWFnbmlpdHVkZVxuICAgICAgICB2YXIgc3RyZW5ndGggPSAodGhpcy5HICogdGhpcy5tYXNzICogb2JqLm1hc3MpIC8gKGRpc3RhbmNlICogZGlzdGFuY2UpO1xuXG4gICAgICAgIC8vZ2V0IGZvcmNlIHZlY3RvciAtLT4gbWFnbml0dWRlICogZGlyZWN0aW9uXG4gICAgICAgIGZvcmNlLm11bHQoc3RyZW5ndGgpO1xuICAgICAgICAvL3ZhciBmb3JjZTtcbiAgICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH1cblxuICAgIHRoaXMuYXBwbHlHcmF2aXR5ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyYWN0b3JzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciBhID0gYXR0cmFjdG9yc1tpXTtcbiAgICAgICAgICAgIGlmIChhLndzID09PSB0aGlzLmF0bGFzLndzKXsgLy9nZXQgZXZlcnlvbmUgYXBwbGllZCB0byBhbmQgYXR0cmFjdCB0byBpdFxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhdHRyYWN0ZWQgdG86ICcgKyBhLndzKTtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IGEuY2FsY3VsYXRlQXR0cmFjdGlvbih0aGlzKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhmKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5Rm9yY2UoZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCJ2YXIgcGFydGljbGVzID0gW107XG52YXIgbGltaXQgPSAxMDtcbnZhciBpbWdzID0gW107XG5cbnZhciB3ZWFrc2lnbmFscyA9IFtdO1xudmFyIGtleXdvcmRzID0gW107XG5cbnZhciBhdHRyYWN0b3JzID0gW107XG5cbmZ1bmN0aW9uIHByZWxvYWQoKSB7XG59XG5cbnZhciBjbnY7XG5cblxudmFyIGF0bGFzT2JqID0gZnVuY3Rpb24od2Vha3NpZ25hbCwga2V5d29yZCl7XG4gICAgdGhpcy5rdyA9IGtleXdvcmQ7XG4gICAgdGhpcy53cyA9IHdlYWtzaWduYWw7XG59O1xuXG5mdW5jdGlvbiBjZW50ZXJDYW52YXMoKSB7XG4gICAgY252ID0gY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQpO1xuICAgIHZhciB4ID0gKHdpbmRvd1dpZHRoIC0gd2lkdGgpIC8gMjtcbiAgICB2YXIgeSA9ICh3aW5kb3dIZWlnaHQgLSBoZWlnaHQpIC8gMjtcbiAgICBjbnYucG9zaXRpb24oeCwgeSk7XG59XG5cbmZ1bmN0aW9uIHdpbmRvd1Jlc2l6ZWQoKSB7XG4gICAgY2VudGVyQ2FudmFzKCk7XG59XG5cbmZ1bmN0aW9uIHNldHVwKCkge1xuICAgIGNlbnRlckNhbnZhcygpO1xuICAgIHNldHVwV2Vha1NpZ25hbHMoKTtcbiAgICB0ZXh0Rm9udChcIk92ZXJwYXNzIE1vbm9cIik7XG4gICAgZnJhbWVSYXRlKDYwKTtcblxuICAgIC8vIGZvciAodmFyIGkgPSAwOyBpIDwgbGltaXQ7IGkrKykge1xuICAgIC8vICAgICB2YXIgaW1nTG9jID0gKGZsb29yKHJhbmRvbSgxLCBpbWdzLmxlbmd0aCkpIC0gMSk7XG4gICAgLy8gICAgIHZhciBpbWcgPSBpbWdzW2ldO1xuICAgIC8vICAgICBwYXJ0aWNsZXMucHVzaChuZXcgUGFydGljbGUocmFuZG9tKDUwLCB3aWR0aCAtIDUwKSwgcmFuZG9tKDUwLCBoZWlnaHQgLSA1MCksIGltZykpO1xuICAgIC8vIH1cblxuICAgIHdlYWtzaWduYWxzLmZvckVhY2goZnVuY3Rpb24od3MsIGkpe1xuICAgICAgICBrZXl3b3Jkc1swXS5mb3JFYWNoKGZ1bmN0aW9uKGt3LCBpKXtcbiAgICAgICAgICAgIHZhciBhdGxzID0gbmV3IGF0bGFzT2JqKHdzLCBrdyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhdGxzKTtcbiAgICAgICAgICAgIHBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZShyYW5kb20oNTAsIHdpZHRoIC0gNTApLCByYW5kb20oNTAsIGhlaWdodCAtIDUwKSwge3dzOndzLCBrdzprd30pKTtcbiAgICAgICAgfSk7XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gZHJhdygpIHtcbiAgICBiYWNrZ3JvdW5kKCcjMDAwJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRpY2xlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwYXJ0aWNsZXNbaV0uYXBwbHlHcmF2aXR5KCk7XG4gICAgICAgIC8vIHBhcnRpY2xlc1tpXS5zZXBhcmF0ZShwYXJ0aWNsZXMpO1xuICAgICAgICAvLyBwYXJ0aWNsZXNbaV0uc2VwYXJhdGUoYXR0cmFjdG9ycyk7XG4gICAgICAgIHBhcnRpY2xlc1tpXS51cGRhdGUoKTtcbiAgICAgICAgcGFydGljbGVzW2ldLmRpc3BsYXkoKTtcbiAgICB9XG5cbiAgICBmaWxsKDEwMCk7XG4gICAgdGV4dFNpemUoMzIpO1xuICAgIC8vIHRleHQoXCIgICBUaGUgRnV0dXJlIElzIE5vd1wiLCBtb3VzZVgsIG1vdXNlWSwgNjAwLCAyMDApO1xuXG5cbiAgICAvLyB3ZWFrc2lnbmFscy5mb3JFYWNoKGZ1bmN0aW9uKHdzKXtcbiAgICAvLyAgICAgZWxsaXBzZSh3aWR0aC8yLCBoZWlnaHQvMiwgMjAwLCAyMDApO1xuICAgICAgICBmaWxsKDI1NSk7XG4gICAgLy8gICAgIHRleHQod3MsIHdpZHRoLzIsIGhlaWdodC8yLCAyMDAsIDIwMCk7IC8vIHRvZG8gLS0gY3JlYXRlIHdpdGggYm94IGFuZCBhbGlnbiB0byBjZW50ZXIgb2YgdGhhdCBib3hcbiAgICAvLyB9KTtcblxuICAgIGF0dHJhY3RvcnMuZm9yRWFjaChmdW5jdGlvbihhKXtcbiAgICAgICAgYS51cGRhdGUoKTtcbiAgICAgICAgYS5kaXNwbGF5KCk7XG4gICAgfSk7XG59XG5cbmNvbnNvbGUubG9nKCdoZWxsbycrJ3dvcmxkJy5yZXBlYXQoMykpO1xuXG5mdW5jdGlvbiBzZXR1cFdlYWtTaWduYWxzKCl7XG4gICAgLy8gbG9hZCBmcm9tIGZpbGUuLi5cbiAgICAvLyBpbnRvIGFycmF5XG4gICAgY29uc29sZS5sb2coJ3NldHVwJyk7XG5cbiAgICB3ZWFrc2lnbmFscy5wdXNoKFwiQUkgQmlhc1wiKTtcblxuICAgIGF0dHJhY3RvcnMucHVzaChuZXcgQXR0cmFjdG9yKFwiQUkgQmlhc1wiKSk7XG5cbiAgICBrZXl3b3Jkcy5wdXNoKFtcImV4Y2x1c2lvblwiLFwiZGF0YSBzZXRcIiwgXCJhaSBldGhpY3NcIiwgXCJtYW5pcHVsYXRpb25cIl0pO1xufSJdfQ==
